{"version":3,"sources":["../src/index.js"],"names":["express","require","mongoose","cors","swaggerJSDoc","swaggerUi","api","articleRoutes","queryRouter","likeRouter","commentRouter","loginRouter","signupRouter","PORT","process","env","config","req","swaggerDefinition","openapi","info","title","version","description","license","name","url","contact","servers","security","bearerAuth","components","securitySchemes","type","scheme","bearerFormat","options","apis","swaggerSpec","app","connectDB","connect","DBHost","useNewUrlParser","useUnifiedTopology","then","use","origin","json","serve","setup","set","listen","util","getEnv","console","log","error","module","exports"],"mappings":";;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,YAAY,GAAGH,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAC,oBAAD,CAAzB;;AAEA,IAAMK,GAAG,GAAGL,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMM,aAAa,GAAGN,OAAO,CAAC,kBAAD,CAA7B;;AACA,IAAMO,WAAW,GAAGP,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAMQ,UAAU,GAAGR,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAMS,aAAa,GAAGT,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAMU,WAAW,GAAGV,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAMW,YAAY,GAAGX,OAAO,CAAC,kBAAD,CAA5B;;AAGA,IAAMY,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AACA,IAAMG,MAAM,GAAGf,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMgB,GAAG,GAAGhB,OAAO,CAAC,qBAAD,CAAnB;;AAEA,IAAMiB,iBAAiB,GAAG;AAClBC,EAAAA,OAAO,EAAE,OADS;AAElBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,yBADH;AAEJC,IAAAA,OAAO,EAAE;AAFL,GAFY;AAMlBC,EAAAA,WAAW,EACX,kGAPkB;AAQpBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,oBADC;AAEPC,IAAAA,GAAG,EAAE;AAFE,GARW;AAYpBC,EAAAA,OAAO,EAAE;AACPF,IAAAA,IAAI,EAAC,sBADE;AAEPC,IAAAA,GAAG,EAAE;AAFE,GAZW;AAgBpBE,EAAAA,OAAO,EAAE,CACP;AACEF,IAAAA,GAAG,EAAE;AADP,GADO,CAhBW;AAqBlBG,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,UAAU,EAAE;AADd,GADQ,CArBQ;AA0BlBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,eAAe,EAAE;AACfF,MAAAA,UAAU,EAAE;AACVG,QAAAA,IAAI,EAAE,MADI;AAEVC,QAAAA,MAAM,EAAE,QAFE;AAGVC,QAAAA,YAAY,EAAE,KAHJ;AAIVV,QAAAA,IAAI,EAAE,YAJI;AAKV,cAAI;AALM;AADG;AADT;AA1BM,CAA1B;AAuCM,IAAMW,OAAO,GAAG;AACdlB,EAAAA,iBAAiB,EAAjBA,iBADc;AAEd;AACAmB,EAAAA,IAAI,EAAE,CAAC,iBAAD;AAHQ,CAAhB;AAMN,IAAMC,WAAW,GAAGlC,YAAY,CAACgC,OAAD,CAAhC;AAEA,IAAMG,GAAG,GAAGvC,OAAO,EAAnB;;AAEA,IAAMwC,SAAS;AAAA,qEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJtC,QAAQ,CAACuC,OAAT,CAAiBzB,MAAM,CAAC0B,MAAxB,EAAgC;AAAEC,cAAAA,eAAe,EAAE,IAAnB;AAAyBC,cAAAA,kBAAkB,EAAE;AAA7C,aAAhC,EACLC,IADK,CACA,YAAI;AACF;AACFN,cAAAA,GAAG,CAACO,GAAJ,CAAQ3C,IAAI,CAAC;AACT4C,gBAAAA,MAAM,EAAE;AADC,eAAD,CAAZ;AAIER,cAAAA,GAAG,CAACO,GAAJ,CAAQ9C,OAAO,CAACgD,IAAR,EAAR,EANE,CAQF;;AAAA;AACDT,cAAAA,GAAG,CAACO,GAAJ,CAAQ,OAAR,EAAiBzC,SAAS,CAAC4C,KAA3B,EAAkC5C,SAAS,CAAC6C,KAAV,CAAgBZ,WAAhB,CAAlC;AAECC,cAAAA,GAAG,CAACO,GAAJ,CAAQ,GAAR,EAAYxC,GAAZ;AACAiC,cAAAA,GAAG,CAACO,GAAJ,CAAQ,UAAR,EAAmBvC,aAAnB;AACAgC,cAAAA,GAAG,CAACO,GAAJ,CAAQ,QAAR,EAAiBtC,WAAjB;AACA+B,cAAAA,GAAG,CAACO,GAAJ,CAAQ,OAAR,EAAgBrC,UAAhB;AACA8B,cAAAA,GAAG,CAACO,GAAJ,CAAQ,UAAR,EAAmBpC,aAAnB;AAEA6B,cAAAA,GAAG,CAACO,GAAJ,CAAQ,QAAR,EAAkBnC,WAAlB;AACA4B,cAAAA,GAAG,CAACO,GAAJ,CAAQ,SAAR,EAAmBlC,YAAnB;AAEA2B,cAAAA,GAAG,CAACY,GAAJ,CAAQ,MAAR,EAAetC,IAAf;AAEA0B,cAAAA,GAAG,CAACa,MAAJ,CAAWvC,IAAX,EAAiB,YAAK;AACpB,oBAAGG,MAAM,CAACqC,IAAP,CAAYC,MAAZ,CAAmB,UAAnB,KAAkC,MAArC,EAA4C;AAC1CC,kBAAAA,OAAO,CAACC,GAAR,CAAY,4BAA0B3C,IAAtC;AACC;AACF,eAJH;AAKP,aA5BK,WA6BK,UAAU4C,KAAV,EAAiB;AACpBF,cAAAA,OAAO,CAACC,GAAR,8CAAkDC,KAAlD;AACL,aA/BG,CADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATjB,SAAS;AAAA;AAAA;AAAA,GAAf,C,CAmCI;;;AACAA,SAAS;AACTkB,MAAM,CAACC,OAAP,GAAiBpB,GAAjB","sourcesContent":["const express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\")\nconst swaggerJSDoc = require(\"swagger-jsdoc\");\nconst swaggerUi = require(\"swagger-ui-express\")\n\nconst api = require(\"./routes/api\")\nconst articleRoutes = require(\"./routes/article\")\nconst queryRouter = require(\"./routes/query\")\nconst likeRouter = require(\"./routes/like\")\nconst commentRouter = require(\"./routes/comment\")\n\nconst loginRouter = require(\"./routes/login\")\nconst signupRouter = require(\"./routes/sign-up\")\n\n\nconst PORT = process.env.PORT || 5000;\nconst config = require(\"config\");\nconst req = require(\"express/lib/request\");\n\nconst swaggerDefinition = {\n        openapi: '3.0.0',\n        info: {\n          title: 'Express API for My Blog',\n          version: '1.0.0',\n        },\n        description:\n        'This is a REST API application made with Express. It retrieves data from Mongodb using mongoose.',\n      license: {\n        name: 'Licensed Under MIT',\n        url: 'https://spdx.org/licenses/MIT.html',\n      },\n      contact: {\n        name:\"HIMBAZA Alain Honore\",\n        url: 'https://github.com/Himbaza123h/My_Brand_Cohort8',\n      },\n      servers: [\n        {\n          url: 'http'\n        }]\n        ,\n        security: [\n          {\n            bearerAuth: [],\n          },\n        ],\n        components: {\n            securitySchemes: {\n              bearerAuth: {\n                type: 'http',\n                scheme: 'bearer',\n                bearerFormat: 'JWT',\n                name: 'bearerAuth',\n                in: 'header'\n              }\n            }\n        },\n      };\n      \n      const options = {\n        swaggerDefinition,\n        // Paths to files containing OpenAPI definitions\n        apis: ['src/routes/*.js'],\n      };\n      \nconst swaggerSpec = swaggerJSDoc(options);\n\nconst app = express();\n\nconst connectDB = async () => {\n        await mongoose.connect(config.DBHost, { useNewUrlParser: true, useUnifiedTopology: true })\n        .then(()=>{\n                //middlewares\n              app.use(cors({\n                  origin: '*'\n                }))\n                \n                app.use(express.json())\n                 \n                //middlewares for routes\n               app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n                app.use(\"/\",api)\n                app.use(\"/article\",articleRoutes)\n                app.use(\"/query\",queryRouter)\n                app.use(\"/like\",likeRouter)\n                app.use(\"/comment\",commentRouter)\n\n                app.use(\"/login\", loginRouter)\n                app.use(\"/signup\", signupRouter)\n\n                app.set(\"port\",PORT)\n\n                app.listen(PORT, () =>{\n                  if(config.util.getEnv('NODE_ENV') != 'test'){\n                    console.log(\"server started on port \"+PORT)\n                    } \n                  })\n        })\n            .catch(function (error) {\n                console.log(`Unable to connect to the Mongo db  ${error} `);\n          });\n    };\n    \n    // use as a function        \n    connectDB();\n    module.exports = app;\n"],"file":"index.js"}