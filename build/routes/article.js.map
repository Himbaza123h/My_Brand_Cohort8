{"version":3,"sources":["../../src/routes/article.js"],"names":["express","require","validateArticle","Article","validateComment","Comment","router","Router","validateMiddleWare","validateLike","Like","validateDislike","Dislike","get","req","res","find","articles","status","send","error","findOne","_id","params","id","article","post","verifyToken","heading","body","content","userId","user","image","newArticle","save","Message","patch","title","length","json","message","articleUser","deleteOne","put","comments","console","sendStatus","articleId","User","log","email","newComment","comment","commentid","CommentUser","commentUser","likes","like","dislikes","likeExists","dislikeExists","newLike","newDislike","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst {validateArticle, Article } = require(\"../models/Article\");\nconst {validateComment,Comment } = require(\"../models/Comment\");\nconst router = express.Router();\nconst validateMiddleWare = require('../middlewares/validateMiddleware');\nconst {validateLike,Like } = require(\"../models/Like\");\nconst {validateDislike,Dislike } = require(\"../models/Dislike\");\nimport { verifyToken } from \"../controllers/verifyToken\";\nimport validateMiddleware from \"../middlewares/validateMiddleware\";\n\n/**\n * @swagger\n * security:\n *   bearerAuth: []\n * /articles:\n *   get:\n *     summary: GET a list of articles\n *     tags:\n *       - Article\n *     responses:\n *       '400':\n *         description: Bad Request \n *       '200':\n *         description: A list of queries.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Article' \n * components:\n *   schemas:\n *     Article:\n *       type: object\n *       properties:\n *         heading:\n *           type: string\n *           description: heading of the article\n *           example: Manchester United boss Ralf Rangnick believes club getting better\n *         content: \n *           type: string\n *           description: Detailed contents of the article\n *           example: The Old Trafford defeat by Chris Wilder's Championship side ended any realistic hope of United winning their first domestic silverware since 2017.\n *         image:\n *           type: string\n *           description: The image in the article.\n *           example: smilingcat.png\n */\n\n\nrouter.get(\"/\",  async(req,res)=>{\n    try {\n        const articles = await Article.find({});\n        res.status(200).send(articles);\n    } catch (error){\n        res.status(404).send({error:\"Problem getting articles\"})\n    }\n})\n\n/**\n * @swagger\n * \"/articles/:id\":\n *   get:\n *     summary: Find article by ID\n *     tags: \n *       - Article\n *     parameters:\n *       - name: articleId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the article\n *     responses:\n *       \"200\":\n *         description: successful operation\n *         content:\n *           application/json:\n *             schema:\n *               $ref: \"#/components/schemas/Article\"\n *       \"404\":\n *         description: Article not found\n */\n\nrouter.get(\"/:id\", async (req,res) =>{\n    try {\n        const article = await Article.findOne({ _id: req.params.id})\n        if (article) {\n            res.status(200).send(article)   \n        }else{\n            res.status(404).send({error: \"Article doesn't exist !\"})\n        }\n    } catch (err) {\n        res.status(404).send({error: \"Article doesn't exist !\"})\n        // console.log(err)\n    }\n\n})\n\n\n/** \n* @swagger\n* /articles/:\n*   post:\n*     summary: Add New Article\n*     tags:\n*       - Article\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*             schema:\n*               $ref: '#/components/schemas/Article' \n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':\n*         description: Query added.\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n*/\nrouter.post(\"/\",verifyToken, validateMiddleware(validateArticle), async (req,res) =>{\n   // console.log(req.body)\n   try {\n    \n    const newArticle =await new Article({\n        heading : req.body.heading,\n        content : req.body.content,\n        userId: req.user[\"id\"],\n        image : req.body.image,\n        })\n       // console.log(req.user[\"id\"])\n     await newArticle.save();\n\n     res.status(201).send({Message:\"New Article Created\"})     \n   } catch (error){\n       res.status(400).send({error:\"There was a problem publishing the article\"})\n    //    console.log(error)\n   }\n})\n\n/** \n* @swagger\n* \"/articles/:id\":\n*    patch:\n*      summary: Update an existing article\n*      tags:\n*        - Article\n*      parameters:\n*        - name: Article Id\n*          in: formData\n*          required: true\n*          schema:\n*            type: string\n*          description: The Id of the Article\n*        - name: Image\n*          in: formdata\n*          required: true\n*          schema:\n*            type: file\n*          description: The Image of the Article\n*        - name: heading\n*          in: formData\n*          required: true\n*          schema:\n*            type: string\n*          description: The heading of the Article\n*        - name: Content\n*          in: formData\n*          required: true\n*          schema:\n*            type: string\n*          description: The content of the Article\n*      responses:\n*        '400':\n*          description: Bad Request \n*        '201':\n*          description: article patched.\n*          content:\n*            application/json:\n*              schema:\n*                type: object\n*                properties:\n*                  Message:\n*                    type: string\n*/\nrouter.patch(\"/:id\",verifyToken, validateMiddleware(validateArticle), async (req,res) => {\n\ttry {\n\t\tconst article = await Article.findOne({ _id: req.params.id })\n\t\tif (req.body.title.length > 0 && req.body.content.length > 0) {\n\t\t\tarticle.title = req.body.title,\n\t\t\tarticle.content = req.body.content\n\t\t\tawait article.save()\n\t\t\treturn res.status(200).json({message:\"Article successfully updated!\"});\n\t\t}\n\t\telse{\n\t\t\treturn res.status(400).json({message:\"Title and content need value!\"});\n\t\t}\n\t} catch {\n\t\treturn res.status(404).json({error: \"Article doesn't exist!\"})\n\t}\n})\n/**\n * @swagger\n * \"/articles/{articleId}\":\n *    delete:\n *      summary: Delete article according to ID\n *      tags: \n *        - Article\n *      parameters:\n *        - name: articleId\n *          in: path\n *          required: true\n *          schema:\n *            type: string\n *          description: The Id of the article\n *      responses:\n *        \"200\":\n *          description: successful operation\n *          content:\n *            application/json:\n *              schema:\n *                $ref: \"#/components/schemas/Article\"\n *        \"404\":\n *          description: Article not found\n */\n\nrouter.delete(\"/articleId\", verifyToken, async (req, res) => {\n\ttry {\n    let articleUser = await Article.findOne({_id: req.params.id})\n        if (req.user[\"id\"] == articleUser[\"userId\"]) {\n            await Article.deleteOne({ _id: req.params.id })\n            res.status(202).send({Message:\"Article deleted successfully\"});      \n        } else {\n            res.status(401).send({Message:\"Not Authorized to perform this operation\"})\n        }\n\t} catch {\n\t\tres.status(404).send({ error: \"This article doesn't exist!\" })\n\t}\n})\nrouter.put(\"/:id\",verifyToken, async (req, res) => {\n\ttry {\n        let articleUser = await Article.findOne({_id: req.params.id})\n        if (req.user[\"id\"] == articleUser[\"userId\"]) {\n\t\t    const article = await Article.findOne({ _id: req.params.id })\n\n            if (req.body.heading) {\n                article.heading = req.body.heading\n            }\n\n            if (req.body.content) {\n                article.content = req.body.content\n            }\n            if (req.body.image) {\n                article.image = req.body.image\n            }\n            await article.save()\n            res.status(200).send(article)\n        }else{\n            res.status(401).send({Message:\"Not Authorized to perform this operation\"})  \n        }\n\t} catch(err) {\n\t\tres.status(404).send({ error: \"We couldn't find that article \" })\n       // console.log(err);\n\t}\n})\n/**\n * @swagger\n * security:\n *   bearerAuth: []\n * /articles/comments:\n *   get:\n *     summary: GET list of comments\n *     tags:\n *       - Comment\n *     responses:\n *       '400':\n *         description: Bad Request \n *       '401':\n *         description: Unauthorized\n *       '200':\n *         description: A list of comments on articles.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 type: object\n *                 properties:\n *                   name:\n *                     articleId: string\n *                     description: The Id of the article with comment.\n *                   userId:\n *                     type: string\n *                     description: The Id of the user who commented\n *                   comment:\n *                     type: string\n *                     description: comment contents\n */\n\n router.get(\"/comments\",  async(req,res)=>{\n    try {\n        const comments = await Comment.find({});\n        res.status(200).send(comments);\n    } catch (error){\n        // console.log(error)\n        res.status(500).send({Message: \"Problem getting comments\"});\n    }\n\n})\n\n\nrouter.get(\"/:id/comments\", async (req,res) =>{\n    try {\n        const comments = await Comment.find({})\n    \n        res.send({comments: comments})   \n    } catch(error)  {\n        console.error(error);\n        res.sendStatus(404).send(\"Comment not found\");\n    }\n})\n\nrouter.get(\":id/comments\", async (req,res) =>{\n    try {\n        const comments = await Comment.find({articleId:req.params.id})\n        if (comments) {\n            res.send(comments)   \n        }else{\n            res.status(404).send(\"No comment for this article\")\n        }\n    } catch(error)  {\n       // console.error(error);\n        res.sendStatus(404).send(\"No comments for this article\");\n    }\n})\n\nrouter.get(\"/user/:id\", async (req,res) =>{\n    try {\n        const user = await User.findOne({_id:req.params.id})\n        if (user) {\n            console.log(user)\n            res.send({\"email\": user.email})   \n        }else{\n            res.status(206).send(\"User not found\")\n        }\n    } catch(error)  {\n       // console.error(error);\n        res.sendStatus(206).send(\"User not found\");\n    }\n})\n\n/**\n* @swagger\n* \"articles/{articleId}/comments\":\n*   get:\n*     summary: get list of comments for single Article\n*     tags: \n*       - Comment\n*     parameters:\n*       - name: articleId\n*         in: path\n*         required: true\n*         schema:\n*           type: string\n*         description: The Id of the comment\n*     responses:\n*       \"200\":\n*         description: successful operation\n*         content:\n*           application/json:\n*             schema:\n*               $ref: \"#/components/schemas/Comment\"\n*       \"404\":\n*         description: Comment not found\n*/\n\nrouter.get(\"/:id/comments\", async (req,res) =>{\n   try {\n       const comments = await Comment.findOne({ articleId: req.params.id})\n       if (comments) {\n           res.status(200).send(comments)   \n       }else{\n           res.status(404).send({error: \"Comment doesn't exist !\"})\n       }\n   } catch (err) {\n       res.status(404).send({error: \" Comment doesn't exist !\"})\n       // console.log(err)\n   }\n\n})\n\n/** \n* @swagger\n* /articles/{articleId}/comments:\n*   post:\n*     summary: Add New Comment\n*     tags:\n*       - Comment\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*             schema:\n*               $ref: '#/components/schemas/Comment' \n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':                            \n*         description: Comment added.                \n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n* components:\n*   schemas:\n*     Comment:\n*       type: object\n*       properties:\n*         articleId:\n*           type: string\n*           description: Article Id to add the comment to\n*           example: 9ad6beae833c2ea873\n*         comment:\n*           type: string\n*           description: comment.\n*           example: I appreciate to be with you in this team\n*/\n\nrouter.post(\"/:id/comments\",verifyToken,validateMiddleWare(validateComment) , async (req,res) =>{\n    try {\n \n     const newComment = new Comment({\n         articleId : req.body.articleId,\n         comment:req.body.comment,\n         userId : req.user[\"id\"]\n         })\n \n         await newComment.save();\n     res.status(201).send({Message:\"Comment added successfully\"})     \n    } catch (error){\n        res.status(500).send({Message:\"problem adding comment\"});\n     //  console.log(error)\n     //  console.log(req.user[\"user\"][\"_id\"])\n    }\n })\n \n \n router.delete(\"/:id/comments\", verifyToken,validateMiddleWare(validateComment), async (req, res) => {\n     try {\n         await Comment.deleteOne({ articleId: req.params.id , userId:req.user[\"user\"][\"_id\"]})\n         res.sendStatus(204).send({Message: \"Comment Deleted successfully\"});\n     } catch {\n         res.status(500).send({ error: \"Problem deleting a comment\" })\n     }\n })\n /**\n * @swagger\n * \"articles/{articleId}/comments/:id\":\n *   delete:\n *     summary: Delete comment according to ID\n *     tags: \n *       - Comment\n *     parameters:\n *       - name: commentId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the comment\n *     responses:\n *       \"200\":\n *         description: successful operation\n *         content:\n *           application/json:\n *             schema:\n *               $ref: \"#/components/schemas/Comment\"\n *       \"404\":\n *         description: Comment not found\n */\n  router.delete(\"/:articleid/comments/:commentid\", verifyToken, async (req, res) => {\n\ttry {\n    let CommentUser = await Comment.findOne({_id: req.params.commentid})\n        if (req.user[\"id\"] == CommentUser[\"userId\"]) {\n            await comment.deleteOne({ _id: req.params.commentid })\n            res.status(202).send({Message:\"Comment deleted successfully\"});      \n        } else {\n            res.status(401).send({Message:\"Not Authorized to perform this operation\"})\n        }\n\t} catch {\n\t\tres.status(404).send({ error: \"This Comment doesn't exist!\" })\n\t}\n})\n\nrouter.put(\"/:id\",verifyToken, async (req, res) => {\n\ttry {\n        let commentUser = await Comment.findOne({_id: req.params.commentid})\n        if (req.user[\"id\"] == commentUser[\"userId\"]) {\n\t\t    const comment = await Comment.findOne({ _id: req.params.commentid })\n\n            if (req.body.comment) {\n                comment.comment = req.body.comment\n            }\n            await comment.save()\n            res.status(200).send(comment)\n        }else{\n            res.status(401).send({Message:\"Not Authorized to perform this operation\"})  \n        }\n\t} catch(err) {\n\t\tres.status(404).send({ error: \"We couldn't find that comment \" })\n       // console.log(err);\n\t}\n})\n\n/**\n * @swagger\n * \"/articles/{articleId}/likes\":\n *   get:\n *     summary: Find all likes for single article\n *     tags: \n *       - Like\n *     parameters:\n *       - name: articleId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the article\n *     responses:\n *       '200':\n *         description: OK\n *       '404':\n *         description:  Not found\n  */\n\n router.get(\"/:id/likes\", async (req,res) =>{\n    try {\n        const likes = await Like.find({articleId:req.params.id})\n\n        res.status(200).send({likes: likes.length})   \n    } catch(error)  {\n        // console.error(error);\n        res.status(404).send({Message:\"No like for this particular article\"});\n    }\n\n})\n\nrouter.get(\"/:id/likes\", async (req,res) =>{\n    try {\n        const like = await Like.find({_id:req.params.id})\n    \n        res.status(200).send({like: like})   \n    } catch(error)  {\n        // console.error(error);\n        res.status(404).send({Message:\"No like for this particular article\"});\n    }\n\n})\n\n\n\nrouter.get(\"/:id/Dislike\", async (req,res) =>{\n    try {\n        const dislikes = await Dislike.find({articleId:req.params.id})\n    \n        res.status(200).send({dislikes: dislikes.length})   \n    } catch(error)  {\n        // console.error(error);\n        res.status(404).send({Message:\"No dislikes for this particular article\"});\n    }\n\n})\n\nrouter.get(\"/:id/likes\", async (req,res) =>{\n    try {\n        const like = await Like.find({_id:req.params.id})\n    \n        res.status(200).send({like: like})   \n    } catch(error)  {\n        // console.error(error);\n        res.status(404).send({Message:\"No like for this particular article\"});\n    }\n\n})\n\n/** \n* @swagger\n* /articles/[{articleId}/likes:\n*   post:\n*     summary: Add New Like\n*     tags:\n*       - Like\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 articleId:\n*                   type: string\n*                   description: The id of the article to like\n*                  \n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':\n*         description: Like added.\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n*/\n\nrouter.post(\"/:id/likes\",verifyToken,validateMiddleWare(validateLike) , async (req,res) =>{\n    try {\n    let likeExists = await Like.findOne({articleId:req.body.articleId, userId: req.user[\"id\"]});\n    let dislikeExists = await Dislike.findOne({articleId:req.body.articleId, userId: req.user[\"id\"]});\n    //check if user has disliked article and remove dislike\n    if (dislikeExists) {\n        await Dislike.deleteOne({ articleId: req.body.articleId , userId:req.user[\"id\"]})\n     }\n     else{\n         //Add New like if a user have previously liked the article\n             if (!likeExists) {\n                 const newLike = new Like({\n                     articleId : req.body.articleId,\n                     userId : req.user[\"id\"]\n                     })\n             \n                     await newLike.save();\n                 res.status(201).send({Message:\"Like added successfully\"})    \n             } else {\n                 res.status(405).send({Message: \"User already liked the article\"})\n             }\n    }\n      \n    } catch (error){\n        res.sendStatus(500).send({error:\"There was a problem adding a like\"})\n     // console.log(error)\n    }\n })\n\n /**\n * @swagger\n * \"/articles/{articleId}/Dislike\":\n *   delete:\n *     summary: Dislike an article\n *     tags: \n *       - Like\n *     parameters:\n *       - name: articleId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the article\n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':\n*         description: Article disliked successfully.\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n */\n\nrouter.delete(\"/:id/Dislike\", verifyToken,validateMiddleWare(validateLike), async (req, res) => {\n\ttry {\n        //check if a user has previously liked the article\n        let likeExists = Like.findOne({articleId:req.body.articleId, userId: req.user[\"id\"]});\n         if (likeExists) {\n            await Like.deleteOne({ articleId: req.params.id , userId:req.user[\"id\"]})\n         }\n         let dislikeExists =await Dislike.findOne({articleId:req.body.articleId, userId: req.user[\"id\"]});\n\n         //check if user has disliked article and remove dislike\n         if (dislikeExists) {\n            res.status(405).send({Message: \"User already disliked the article\"})\n        }else{\n            const newDislike = new Dislike({\n                articleId : req.body.articleId,\n                userId : req.user[\"id\"]\n                })\n        \n                await newDislike.save();\n\n            res.status(201).send({Message:\"you have disliked this article\"}) \n            }\n\t} catch {\n\t\tres.status(500).send({ error: \"Problem disliking\" })\n\t}\n})\n\n\n\nmodule.exports = router;"],"file":"article.js"}