{"version":3,"sources":["../../src/routes/like.js"],"names":["express","require","validateLike","Like","validateDislike","Dislike","Article","router","Router","validateMiddleWare","get","req","res","find","likes","status","send","error","articleId","params","id","length","Message","_id","like","dislikes","post","verifyToken","findOne","body","userId","user","likeExists","dislikeExists","deleteOne","newLike","save","sendStatus","newDislike","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst {validateLike,Like } = require(\"../models/Like\");\nconst {validateDislike,Dislike } = require(\"../models/Dislike\");\nconst {Article } = require(\"../models/Like\");\n\nconst router = express.Router();\nconst validateMiddleWare = require('../middlewares/validateMiddleware')\n\nimport e from \"express\";\nimport { verifyToken } from \"../controllers/verifyToken\";\n\n/**\n * @swagger\n * security:\n *   bearerAuth: []\n * /likes:\n *   get:\n *     summary: GET all Likes\n *     tags:\n *       - Like\n *     responses:\n *       '400':\n *         description: Bad Request \n *       '401':\n *         description: Unauthorized\n *       '200':\n *         description: A list of likes on articles.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 type: object\n *                 properties:\n *                   name:\n *                     articleId: string\n *                     description: The Id of the article with like.\n *                   userId:\n *                     type: string\n *                     description: The Id of the user who gave the like\n */\n\nrouter.get(\"/\",  async(req,res)=>{\n    try {\n    const likes = await Like.find({});\n        res.status(200).send(likes);\n    } catch (error){\n      res.status(500).send({error:\"Problem fetching likes\"})\n      //  console.log(error)\n    }\n\n})\n\n/**\n * @swagger\n * \"/articles/{articleId}/likes\":\n *   get:\n *     summary: Find all likes for single article\n *     tags: \n *       - Like\n *     parameters:\n *       - name: articleId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the article\n *     responses:\n *       '200':\n *         description: OK\n *       '404':\n *         description:  Not found\n  */\n\nrouter.get(\"/articles/:id\", async (req,res) =>{\n    try {\n        const likes = await Like.find({articleId:req.params.id})\n\n        res.status(200).send({likes: likes.length})   \n    } catch(error)  {\n        // console.error(error);\n        res.status(404).send({Message:\"No like for this particular article\"});\n    }\n\n})\n\nrouter.get(\"/articles/:id\", async (req,res) =>{\n    try {\n        const like = await Like.find({_id:req.params.id})\n    \n        res.status(200).send({like: like})   \n    } catch(error)  {\n        // console.error(error);\n        res.status(404).send({Message:\"No like for this particular article\"});\n    }\n\n})\n\n\n\nrouter.get(\"articles/dislike/:id\", async (req,res) =>{\n    try {\n        const dislikes = await Dislike.find({articleId:req.params.id})\n    \n        res.status(200).send({dislikes: dislikes.length})   \n    } catch(error)  {\n        // console.error(error);\n        res.status(404).send({Message:\"No dislikes for this particular article\"});\n    }\n\n})\n\nrouter.get(\"articles/:id\", async (req,res) =>{\n    try {\n        const like = await Like.find({_id:req.params.id})\n    \n        res.status(200).send({like: like})   \n    } catch(error)  {\n        // console.error(error);\n        res.status(404).send({Message:\"No like for this particular article\"});\n    }\n\n})\n/** \n* @swagger\n* /articles/articleId/like:\n*   post:\n*     summary: Add New Like\n*     tags:\n*       - Like\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 articleId:\n*                   type: string\n*                   description: The id of the article to like\n*                  \n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':\n*         description: Like added.\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n*/\n\nrouter.post(\"articles/:id/\",verifyToken,validateMiddleWare(validateLike) , async (req,res) =>{\n   try {\n   let likeExists = await Like.findOne({articleId:req.body.articleId, userId: req.user[\"id\"]});\n   let dislikeExists = await Dislike.findOne({articleId:req.body.articleId, userId: req.user[\"id\"]});\n   //check if user has disliked article and remove dislike\n   if (dislikeExists) {\n       await Dislike.deleteOne({ articleId: req.body.articleId , userId:req.user[\"id\"]})\n    }\n    else{\n        //Add New like if a user have previously liked the article\n            if (!likeExists) {\n                const newLike = new Like({\n                    articleId : req.body.articleId,\n                    userId : req.user[\"id\"]\n                    })\n            \n                    await newLike.save();\n                res.status(201).send({Message:\"Like added successfully\"})    \n            } else {\n                res.status(405).send({Message: \"User already liked the article\"})\n            }\n   }\n     \n   } catch (error){\n       res.sendStatus(500).send({error:\"There was a problem adding a like\"})\n    // console.log(error)\n   }\n})\n\n\n/**\n * @swagger\n * \"/articles/{articleId}/Dislike\":\n *   delete:\n *     summary: Dislike an article\n *     tags: \n *       - Like\n *     parameters:\n *       - name: articleId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the article\n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':\n*         description: Article disliked successfully.\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n */\n\nrouter.delete(\"articles/:id\", verifyToken,validateMiddleWare(validateLike), async (req, res) => {\n\ttry {\n        //check if a user has previously liked the article\n        let likeExists = Like.findOne({articleId:req.body.articleId, userId: req.user[\"id\"]});\n         if (likeExists) {\n            await Like.deleteOne({ articleId: req.params.id , userId:req.user[\"id\"]})\n         }\n         let dislikeExists =await Dislike.findOne({articleId:req.body.articleId, userId: req.user[\"id\"]});\n\n         //check if user has disliked article and remove dislike\n         if (dislikeExists) {\n            res.status(405).send({Message: \"User already disliked the article\"})\n        }else{\n            const newDislike = new Dislike({\n                articleId : req.body.articleId,\n                userId : req.user[\"id\"]\n                })\n        \n                await newDislike.save();\n\n            res.status(201).send({Message:\"you have disliked this article\"}) \n            }\n\t} catch {\n\t\tres.status(500).send({ error: \"Problem disliking\" })\n\t}\n})\n\nmodule.exports = router;\n"],"file":"like.js"}