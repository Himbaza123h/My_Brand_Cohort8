{"version":3,"sources":["../../src/routes/query.js"],"names":["express","require","Query","validateQuery","router","Router","validateMiddleware","get","verifyToken","req","res","find","queries","user","status","send","Message","post","name","body","email","subject","message","newQuery","save","console","log","error","findOne","_id","params","id","query","QueryUser","deleteOne","put","username","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst {Query, validateQuery} = require(\"../models/Query\");\nconst router = express.Router();\n\nconst validateMiddleware = require(\"../middlewares/validateMiddleware\")\n\nimport { verifyToken } from \"../controllers/verifyToken\";\nimport { Article } from \"../models/Article\";\n\n/**\n * @swagger\n * /queries/:\n *   get:\n *     summary: GET a list of queries\n *     tags:\n *       - Query\n *     responses:\n *       '400':\n *         description: Bad Request \n *       '200':\n *         description: A list of queries.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Query' \n * tags:\n *   - name: Auth\n *     description: Routes to access the authentication\n *   - name: Article\n *     description: Access to Articles\n *   - name: Like\n *     description: Access to Likes\n *   - name: Query\n *     description: Access to Queries\n *   - name: Comment\n *     description: Access to Comments\n * components:\n *   schemas:\n *     Query:\n *       type: object\n *       properties:\n *         name:\n *           type: string\n *           description: The user's name.\n *           example: Gafuku Ramos\n *         email:\n *           type: string\n *           description: The user's email.\n *           example: gafuku@gmail.com\n *         subject:\n *           type: string\n *           description: the query subject.\n *           example: Just want to reach out\n *         message:\n *           type: string\n *           description: The user's message in the query.\n *           example: i want to link up and talk about gafuku family\n */\n\nrouter.get(\"/\", verifyToken ,async (req,res)=>{\n    try {\n    const queries = await  Query.find();\n    const user = req.user;\n         res.status(200).send(queries);\n    } catch (error) {\n        res.status(404).send({Message: \"Problem getting articles\"})\n    }\n})\n/** \n* @swagger\n* /queries/:\n*   post:\n*     summary: Add New Query\n*     tags:\n*       - Query\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*             schema:\n*               $ref: '#/components/schemas/Query' \n*     responses:\n*       '400':\n*         description: Bad Request \n*       '201':\n*         description: Query added.\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 Message:\n*                   type: string\n*/\n\nrouter.post(\"/\", validateMiddleware(validateQuery) ,async (req,res) =>{\n   try {\n    const newQuery =await new Query({\n        name : req.body.name,\n        email : req.body.email,\n        subject: req.body.subject,\n        message: req.body.message\n        })\n\n    await newQuery.save();\n    res.status(201).send({\"Message\":\"New Query submitted successfully\"})     \n   } catch (error){\n       console.log(req.body)\n       res.status(400).send({error:\"There was a problem submitting the query\"})\n   }\n})\n/**\n * @swagger\n * \"/queries/:id\":\n *   get:\n *     summary: Find Query by its ID\n *     tags: \n *       - Query\n *     parameters:\n *       - name: queryId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the query\n *     responses:\n *       \"200\":\n *         description: successful operation\n *         content:\n *           application/json:\n *             schema:\n *               $ref: \"#/components/schemas/Query\"\n *       \"404\":\n *         description: Query not found\n */\n\n router.get(\"/:id\", async (req,res) =>{\n    try {\n        const query = await Query.findOne({ _id: req.params.id})\n        if (query) {\n            res.status(200).send(query)   \n        }else{\n            res.status(404).send({error: \"Query doesn't exist !\"})\n        }\n    } catch (err) {\n        res.status(404).send({error: \"Query doesn't exist !\"})\n        // console.log(err)\n    }\n\n})\n\n\n\n/**\n * @swagger\n * \"/queries/:id\":\n *   delete:\n *     summary: Delete a Query according to its ID\n *     tags: \n *       - Query\n *     parameters:\n *       - name: QueryId\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *         description: The Id of the Query\n *     responses:\n *       \"200\":\n *         description: successful operation\n *         content:\n *           application/json:\n *             schema:\n *               $ref: \"#/components/schemas/Query\"\n *       \"404\":\n *         description: Query not found\n */\n router.delete(\"/:id\", verifyToken, async (req, res) => {\n\ttry {\n    let QueryUser = await Query.findOne({_id: req.params.id})\n        if (req.user[\"id\"] == QueryUser[\"userId\"]) {\n            await Query.deleteOne({ _id: req.params.id })\n            res.status(202).send({Message:\"Query deleted successfully\"});      \n        } else {\n            res.status(401).send({Message:\"Not Authorized to perform this operation\"})\n        }\n\t} catch {\n\t\tres.status(404).send({ error: \"This Query doesn't exist!\" })\n\t}\n})\n\nrouter.put(\"/:id\",verifyToken, async (req, res) => {\n\ttry {\n        let QueryUser = await Query.findOne({_id: req.params.id})\n        if (req.user[\"id\"] == QueryUser[\"userId\"]) {\n\t\t    const Query = await Query.findOne({ _id: req.params.id })\n\n            if (req.body.username) {\n                query.username = req.body.username\n            }\n\n            if (req.body.email) {\n                query.email = req.body.email\n            }\n            if (req.body.message) {message\n                query.message = req.body.message\n            }\n            if (req.body.subject) {\n                query.subject = req.body.subject\n            }\n            await query.save()\n            res.status(200).send(query)\n        }else{\n            res.status(401).send({Message:\"Not Authorized to perform this operation\"})  \n        }\n\t} catch(err) {\n\t\tres.status(404).send({ error: \"We couldn't find that query \" })\n       // console.log(err);\n\t}\n})\nmodule.exports = router;"],"file":"query.js"}